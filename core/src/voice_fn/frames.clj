(ns voice-fn.frames)

(defrecord BaseFrame [type data ts])

(defn frame? [frame]
  (instance? BaseFrame frame))

(defn create-frame
  [type data]
  (let [ts (System/currentTimeMillis)]
    ;; Using namespaced keywords for convenience sicne records don't support
    ;; namespaced params by default
    (map->BaseFrame {:type type
                     :frame/type type
                     :data data
                     :frame/data data
                     :ts ts
                     :frame/ts ts})))

(defn system-frame?
  "Returns true if the frame is a system frame that should be processed immediately"
  [frame]
  (let [frame-type (:frame/type frame)]
    (or (= frame-type :system/start)
        (= frame-type :system/stop)
        (= frame-type :system/bot-interruption)
        (= frame-type :user/started-speaking)
        (= frame-type :user/stopped-speaking))))

(defmacro defframe
  "Define a frame creator function and its predicate.
   Usage: (defframe audio-input :audio/raw-input \"Doc string\")"
  [name type docstring]
  `(do
     (defn ~name
       ~docstring
       [data#]
       (create-frame ~type data#))

     (defn ~(symbol (str name "?"))
       [frame#]
       (and (frame? frame#) (= ~type (:frame/type frame#))))))

(defframe start-frame :system/start "Frame sent when the pipeline begins")
(defframe stop-frame :system/stop "Frame send when the pipeline stops")

(defframe audio-input-frame :audio/raw-input "User audio input frame. Put on the pipeline by the input transport. Data is
  bynary")

(defframe audio-output-frame :audio/output "Audio frame to be played back to the user through output transport. Generated
  by text to speech processors or multi modal (with voice capabilities) LLM processors. Data is binary")

(defframe text-input-frame :text/input "Frame usually outputted by a transcription processor. Serves as input for text
  LLM processors.")

(defframe llm-output-text-sentence-frame :llm/output-text-sentence
  "Frame generated by a sentence assembler that takes in chunks from a LLM processor")

(defframe llm-output-text-chunk-frame :llm/output-text-chunk
  "Frame outputted by text based streaming LLMs")

(defframe error-frame :system/error "General error")

(defframe elevenlabs-audio-chunk-frame :elevenlabs/audio-chunk "Elevenlabs doesn't send full json, sometimes it just sends partial JSON that needs to be assembled")

(defframe llm-user-context-added-frame :llm/user-context-added "Frame sent after the user context was appended to the AI context. Used to sync the llm aggregator with the llm processor pipeline")

(defframe user-started-speaking-frame :user/started-speaking
  "Sent when user starts speaking, used to pause AI output")

(defframe user-stopped-speaking-frame :user/stopped-speaking
  "Sent when user stops speaking, used to resume AI output")
