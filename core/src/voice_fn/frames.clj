(ns voice-fn.frames)

(defrecord BaseFrame [type data ts])

(defn frame? [frame]
  (instance? BaseFrame frame))

(defn create-frame
  [type data]
  (let [ts (System/currentTimeMillis)]
    ;; Using namespaced keywords for convenience sicne records don't support
    ;; namespaced params by default
    (map->BaseFrame {:type type
                     :frame/type type
                     :data data
                     :frame/data data
                     :ts ts
                     :frame/ts ts})))

(defn system-frame?
  "Returns true if the frame is a system frame that should be processed immediately"
  [frame]
  (let [frame-type (:frame/type frame)]
    (or (= frame-type :system/start)
        (= frame-type :system/stop)
        (= frame-type :system/bot-interruption)
        (= frame-type :user/started-speaking)
        (= frame-type :user/stopped-speaking)
        (= frame-type :pipeline/start-interruption)
        (= frame-type :pipeline/stop-interruption))))

(defmacro defframe
  "Define a frame creator function and its predicate.
   Usage: (defframe audio-input :audio/raw-input \"Doc string\")"
  [name docstring type]
  `(do
     (defn ~name
       ~docstring
       [data#]
       (create-frame ~type data#))

     (defn ~(symbol (str name "?"))
       [frame#]
       (and (frame? frame#) (= ~type (:frame/type frame#))))))

(defframe start-frame
  "Frame sent when the pipeline begins"
  :system/start)

(defframe stop-frame
  "Frame send when the pipeline stops"
  :system/stop)

(defframe audio-input-frame
  "User audio input frame. Put on the pipeline by the input transport. Data is bynary"
  :audio/raw-input)

(defframe audio-output-frame
  "Audio frame to be played back to the user through output transport. Generated
  by text to speech processors or multi modal (with voice capabilities) LLM
  processors. Data is binary"
  :audio/output)

(defframe interim-transcription-frame
  "A text frame with intrim transcription specific data. Usually aggregated into
  full transcription by an aggregator."
  :transcription/interim-results)

(defframe transcription-frame
  "A text frame with transcription specific data."
  :transcription/result)

(defframe text-input-frame
  "Frame usually outputted by a transcription processor. Serves as input for
  text LLM processors."
  :text/input)

(defframe llm-output-text-sentence-frame
  "Frame generated by a sentence assembler that takes in chunks from a LLM
  processor"
  :llm/output-text-sentence)

(defframe llm-output-text-chunk-frame
  "Frame outputted by text based streaming LLMs"
  :llm/output-text-chunk)

(defframe error-frame "General error"
  :system/error)

(defframe elevenlabs-audio-chunk-frame
  "Elevenlabs doesn't send full json, sometimes it just sends partial JSON that
  needs to be assembled"
  :elevenlabs/audio-chunk)

(defframe llm-user-context-added-frame
  "Frame sent after the user context was appended to the AI context. Used to
  sync the llm aggregator with the llm processor pipeline"
  :llm/user-context-added)

(defframe user-started-speaking-frame
  "Sent when user starts speaking, used to pause AI output"
  :user/started-speaking)

(defframe user-stopped-speaking-frame
  "Sent when user stops speaking, used to resume AI output"
  :user/stopped-speaking)

(defframe start-interruption-frame
  "Frame sent when the pipeline should be interrupted. Usually because the user started speaking"
  :pipeline/start-interruption)

(defframe stop-interruption-frame
  "Frame sent when the pipeline should resume processing. Usually means the user has stopped speaking"
  :pipeline/stop-interruption)
